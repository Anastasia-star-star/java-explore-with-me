{
	"info": {
		"_postman_id": "fa1d16e2-b343-4854-986e-994401bd5919",
		"name": "Test Explore With Me -  Feature location_processing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26949207"
	},
	"item": [
		{
			"name": "Validation",
			"item": [
				{
					"name": "Locations",
					"item": [
						{
							"name": "Required query params",
							"item": []
						},
						{
							"name": "Unrequired query params",
							"item": [
								{
									"name": "Поиск локаций без Query params",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let compilation;\r",
													"    try {\r",
													"        const location = await api.addLocation(rnd.getLocation());\r",
													"        pm.collectionVariables.set(\"uid\", location.id)\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.be.ok;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/locations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"locations"
											],
											"query": [
												{
													"key": "from",
													"value": "0",
													"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
													"disabled": true
												},
												{
													"key": "size",
													"value": "10",
													"description": "количество элементов в наборе",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Поиск локаций с параметрами",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let compilation;\r",
													"    try {\r",
													"        let location1 = rnd.getLocation();\r",
													"        location1 = await api.addLocation(location1);\r",
													"\r",
													"        let location2 = rnd.getLocation()\r",
													"        location2 = await api.addLocation(location2);\r",
													"        pm.collectionVariables.set('source1', location1);\r",
													"        pm.collectionVariables.set('source2', location2);\r",
													"\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.be.ok;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"const source1 = pm.collectionVariables.get('source1');\r",
													"const source2 = pm.collectionVariables.get('source2');\r",
													"\r",
													"pm.test(\"Локации должны содержать поля: id, lat, lon, radius\", function () {\r",
													"    pm.expect(target[target.length-2]).to.have.property('id');\r",
													"    pm.expect(target[target.length-2]).to.have.property('lat');\r",
													"    pm.expect(target[target.length-2]).to.have.property('lon');\r",
													"    pm.expect(target[target.length-2]).to.have.property('radius');\r",
													"    pm.expect(target[target.length-1]).to.have.property('id');\r",
													"    pm.expect(target[target.length-1]).to.have.property('lat');\r",
													"    pm.expect(target[target.length-1]).to.have.property('lon');\r",
													"    pm.expect(target[target.length-1]).to.have.property('radius');\r",
													"});\r",
													"\r",
													"pm.test(\"Данные последних двух локаций должны совпадать с данными добавленных локаций\", function () {\r",
													"    pm.expect(target[target.length-2].id).to.equal(source1.id);\r",
													"    pm.expect(target[target.length-2].lat).to.equal(source1.lat);\r",
													"    pm.expect(target[target.length-2].lon).to.equal(source1.lon);\r",
													"    pm.expect(target[target.length-2].radius).to.equal(source1.radius);\r",
													"    pm.expect(target[target.length-1].id).to.equal(source2.id);\r",
													"    pm.expect(target[target.length-1].lat).to.equal(source2.lat);\r",
													"    pm.expect(target[target.length-1].lon).to.equal(source2.lon);\r",
													"    pm.expect(target[target.length-1].radius).to.equal(source2.radius);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/locations?from={{fromId}}&size=100000",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"locations"
											],
											"query": [
												{
													"key": "ids",
													"value": "{{uid}}",
													"description": "id пользователей",
													"disabled": true
												},
												{
													"key": "from",
													"value": "{{fromId}}",
													"description": "количество элементов, которые нужно пропустить для формирования текущего набора"
												},
												{
													"key": "size",
													"value": "100000",
													"description": "количество элементов в наборе"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Required params in body",
							"item": [
								{
									"name": "Добавление локации без поля radius",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let location;\r",
													"    try {\r",
													"        location = rnd.getLocation();\r",
													"        delete location.radius;\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(location),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/locations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"locations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление локации без поля lat",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let location;\r",
													"    try {\r",
													"        location = rnd.getLocation();\r",
													"        delete location.lat;\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(location),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/locations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"locations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление локации без поля lon",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let location;\r",
													"    try {\r",
													"        location = rnd.getLocation();\r",
													"        delete location.lon;\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(location),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/locations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"locations"
											]
										}
									},
									"response": []
								},
								{
									"name": "Добавление локации с отрицательным радиусом",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    let location;\r",
													"    try {\r",
													"        location = rnd.getLocation();\r",
													"        location.radius = -5;\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"\r",
													"    pm.request.body.update({\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify(location),\r",
													"        options: { raw: { language: 'json' } }\r",
													"    });\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{request_body}}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/admin/locations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"locations"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "String length restrictions",
							"item": []
						},
						{
							"name": "Default values check",
							"item": [
								{
									"name": "Проверка на значения по-умолчанию from и size(location)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const main = async () => {\r",
													"    const api = new API(pm);\r",
													"    const rnd = new RandomUtils();\r",
													"\r",
													"    try {\r",
													"        for (let i = 0; i < 11; i++){\r",
													"            await api.addLocation(rnd.getLocation());\r",
													"        }\r",
													"        pm.sendRequest({\r",
													"            url : \"http://localhost:8080/admin/locations?from=0\",\r",
													"            method : \"GET\",\r",
													"            header: { \"Content-Type\": \"application/json\" }\r",
													"        }, (error, response) => {pm.collectionVariables.set('source', response.json())});\r",
													"    } catch(err) {\r",
													"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
													"    }\r",
													"};\r",
													"\r",
													"const interval = setInterval(() => {}, 1000);\r",
													"\r",
													"setTimeout(async () => \r",
													"    {\r",
													"        try {\r",
													"            await main();\r",
													"        } catch (e) {\r",
													"            console.error(e);\r",
													"        } finally {\r",
													"            clearInterval(interval);\r",
													"        }\r",
													"    },  \r",
													"    100 \r",
													");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
													"    pm.response.to.be.ok;    \r",
													"    pm.response.to.be.withBody;\r",
													"    pm.response.to.be.json;\r",
													"});\r",
													"\r",
													"const target = pm.response.json();\r",
													"const source = pm.collectionVariables.get('source');\r",
													"\r",
													"pm.test(\"Значение from по-умолчанию должно быть равным 0\", function () {\r",
													"    pm.expect(target[0].id).to.be.equal(source[0].id, 'Запросы с from=0 и без него должны начинаться с одной и той же локации');\r",
													"});\r",
													"\r",
													"pm.test(\"Значение size по-умолчанию должно быть равным 10\", function () {\r",
													"    pm.expect(target.length).to.be.equal(10);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/admin/locations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"admin",
												"locations"
											],
											"query": [
												{
													"key": "from",
													"value": "0",
													"description": "количество элементов, которые нужно пропустить для формирования текущего набора",
													"disabled": true
												},
												{
													"key": "size",
													"value": "10",
													"description": "количество элементов в наборе",
													"disabled": true
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "409 Conflict",
			"item": [
				{
					"name": "Удаление локации с привязанными событиями",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const event = await api.addEvent(user.id, rnd.getEvent(category.id));        \r",
									"        pm.collectionVariables.set('locid', event.location.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(409);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/locations/:locid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"locations",
								":locid"
							],
							"variable": [
								{
									"key": "locid",
									"value": "{{locid}}"
								}
							]
						},
						"description": "Обратите внимание: с категорий не должно быть связано ни одного события."
					},
					"response": []
				}
			]
		},
		{
			"name": "Location",
			"item": [
				{
					"name": "Добавление новой локации",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let location;\r",
									"    try {\r",
									"        location = rnd.getLocation();\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(location),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Локация должна содержать поля: id, lat, lon, radius\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('lat');\r",
									"pm.expect(target).to.have.property('lon');\r",
									"pm.expect(target).to.have.property('radius');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.lat).equal(target.lat, 'Широта локации должна совпадать с отправленным');\r",
									"    pm.expect(source.lon).equal(target.lon, 'Долгота локации должна совпадать с отправленным');\r",
									"    pm.expect(source.radius).equal(target.radius, 'Радиус локации должен совпадать с отправленным');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/locations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"locations"
							]
						},
						"description": "Обратите внимание: имя категории должно быть уникальным"
					},
					"response": []
				},
				{
					"name": "Получение локаций",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const location = await api.addLocation(rnd.getLocation());\r",
									"        pm.collectionVariables.set(\"response\", location)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json();\r",
									"let founded;\r",
									"target.forEach(function(element){if (element.id == source.id) founded = element});\r",
									"\r",
									"pm.test(\"Локация должна содержать поля: id, lat, lon, radius\", function () {\r",
									"pm.expect(target[0]).to.have.property('id');\r",
									"pm.expect(target[0]).to.have.property('lat');\r",
									"pm.expect(target[0]).to.have.property('lon');\r",
									"pm.expect(target[0]).to.have.property('radius');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(source.id).equal(founded.id, 'Идентификатор локации должен соответствовать идентификатору локации добавленной ранее');\r",
									"    pm.expect(source.lat).equal(founded.lat, 'Широта локации должна соответствовать широте локации добавленной ранее');\r",
									"    pm.expect(source.lon).equal(founded.lon, 'Долгота локации должна соответствовать долготе локации добавленной ранее');\r",
									"    pm.expect(source.radius).equal(founded.radius, 'Радиус локации должен соответствовать радиусу локации добавленной ранее');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/locations?from=0&size=1000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"locations"
							],
							"query": [
								{
									"key": "from",
									"value": "0",
									"description": "количество категорий, которые нужно пропустить для формирования текущего набора"
								},
								{
									"key": "size",
									"value": "1000",
									"description": "количество категорий в наборе"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение информации о локации по её идентификатору",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const location = await api.addLocation(rnd.getLocation());\r",
									"        pm.collectionVariables.set(\"response\", location)\r",
									"        pm.collectionVariables.set(\"locid\", location.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Локация должна содержать поля: id, lat, lon, radius\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('lat');\r",
									"pm.expect(target).to.have.property('lon');\r",
									"pm.expect(target).to.have.property('radius');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(source.id).equal(target.id, 'Идентификатор локации должен соответствовать идентификатору в запросе');\r",
									"    pm.expect(source.lat).equal(target.lat, 'Широта локации должна соответствовать широте локации с указанным идентификатором');\r",
									"    pm.expect(source.lon).equal(target.lon, 'Долгота локации должна соответствовать долготе локации с указанным идентификатором');\r",
									"    pm.expect(source.radius).equal(target.radius, 'Радиус локации должен соответствовать радиусу локации с указанным идентификатором');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/locations/:locid",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"locations",
								":locid"
							],
							"variable": [
								{
									"key": "locid",
									"value": "{{locid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление локации",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const location = await api.addLocation(rnd.getLocation());\r",
									"        const findedLocation = await api.findLocation(location.id);\r",
									"        pm.collectionVariables.set(\"locid\", location.id)\r",
									"        pm.collectionVariables.set(\"response\", findedLocation)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"source = pm.collectionVariables.get('response');\r",
									"locId = pm.collectionVariables.get('locid');\r",
									"\r",
									"pm.test(\"Локация должна быть найдена до удаления\", function () {\r",
									"    pm.expect(source.id).equal(locId, 'Идентификтор локации должен совпадать с удаляемым');\r",
									"});\r",
									"\r",
									"pm.sendRequest({\r",
									"            url: pm.collectionVariables.get(\"baseUrl\") + \"/admin/locations/\" + locId,\r",
									"            method: 'GET',\r",
									"        }, (error, response) => {\r",
									"            pm.test(\"Локация не должна быть найдена после удаления\", function () {\r",
									"                pm.expect(response.code).to.eql(404);\r",
									"            });\r",
									"        });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/locations/:locId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"locations",
								":locId"
							],
							"variable": [
								{
									"key": "locId",
									"value": "{{locid}}"
								}
							]
						},
						"description": "Обратите внимание: с категорий не должно быть связано ни одного события."
					},
					"response": []
				},
				{
					"name": "Изменение локации",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    let location\r",
									"    try {\r",
									"        location = await api.addLocation(rnd.getLocation());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"    pm.collectionVariables.set(\"locid\", Number(location.id))\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            lat : rnd.getLocation().lat,\r",
									"            lon : rnd.getLocation().lon,\r",
									"            radius : rnd.getLocation().radius\r",
									"        }),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Локация должна содержать поля: id, lat, lon, radius\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('lat');\r",
									"pm.expect(target).to.have.property('lon');\r",
									"pm.expect(target).to.have.property('radius');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(source.lat).equal(target.lat, 'Широта локации должна совпадать с отправленным');\r",
									"    pm.expect(source.lon).equal(target.lon, 'Долгота локации должна совпадать с отправленным');\r",
									"    pm.expect(source.radius).equal(target.radius, 'Радиус локации должен совпадать с отправленным');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}"
						},
						"url": {
							"raw": "{{baseUrl}}/admin/locations/:locId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"locations",
								":locId"
							],
							"variable": [
								{
									"key": "locId",
									"value": "{{locid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "confirmedRequests",
			"value": ""
		},
		{
			"key": "responseArr",
			"value": ""
		},
		{
			"key": "source1",
			"value": ""
		},
		{
			"key": "source2",
			"value": ""
		},
		{
			"key": "fromId",
			"value": "0"
		},
		{
			"key": "source",
			"value": ""
		},
		{
			"key": "randomNum",
			"value": ""
		},
		{
			"key": "locid",
			"value": ""
		},
		{
			"key": "locId",
			"value": ""
		}
	]
}